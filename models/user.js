const mongoose = require("mongoose");
const { randomBytes, createHmac } = require("crypto");
const { createTokenForUser } = require("../services/authentication");
const userSchema = new mongoose.Schema(
  {
    fullname: {
      type: String,
      required: true,
    },
    email: {
      type: String,
      required: true,
      unique: true,
    },
    salt: {
      type: String,
    },
    password: {
      type: String,
      required: true,
    },
    profileImageURL: {
      type: String,
      default: "avatar.png",
    },
    role: {
      type: String,
      enum: ["USER", "ADMIN"],
      default: "USER",
    },
  },
  { timestamps: true }
);

// Hashing using Crypto
userSchema.pre("save", function (next) {
  const user = this;
  if (!user.isModified("password")) return;
  const salt = //Unique secret key for every User. keep in mind unique for every user
    randomBytes(16).toString() || //if some reason salt not generated by crypto
    Date.now() + Math.floor(Math.random() * (10000000 - 1000000 + 1)) + 1000000; //then this will work as salt value
  const hashPassword = createHmac("sha256", salt)
    .update(user.password) //hash for who for user means this user , user.password
    .digest("hex"); //so it will convert into hex means string like structure
  this.salt = salt; //this user salt will be unique key that we generate in above code it is unique for every user
  this.password = hashPassword; //and the password is now hash like this LKSDFDFA1234SDFA485AS6DFADSF keep in mind why we did this to not leak the password to hacker or any third party user.
  next(); //if all okay then just continue to other function that we wanna provide with.
});

//Lets matched the password with previously hashed password
userSchema.static(
  "matchPasswordAndGenerateToken",
  async function (email, password) {
    const user = await this.findOne({ email }); //find user by given email
    if (!user) throw new Error("User not found!"); //if not then throw error
    const salt = user.salt; //get salt of that user which is secret key for that user to hashed the user password
    const hashedPassword = user.password; //get password of that user which is already hashed
    const userProvidedHash = createHmac("sha256", salt) //hashed provided password of the client
      .update(password)
      .digest("hex");
    if (hashedPassword !== userProvidedHash)
      //matched both password
      throw new Error("Incorrect Password!"); //if not then throw error, you also display this error on frontend lets learn after sometimes.
    // return { user };   //Instead of returning user return the createTokenForUser function.
    const token = createTokenForUser(user); //we just passed the user in it then it will get userid, email,profilepic, role etc and then generate a token and we have our secret key also
    return token; //return the token which has all the data of user so we can added to browser cookies as token.
  }
);

const User = mongoose.model("user", userSchema); //users is a collections & every new userSchema which is created is a documents of that users collections

module.exports = User; //export that user so we can get all the data of that user and do exiting stuff with it
